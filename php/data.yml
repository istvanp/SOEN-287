- title: "Hello World in PHP"
  desc: |
        PHP code that must be evaluated by the PHP interpreter must always be enclosed in `<?php &hellip; ?>` tags. You might also be able to use the short open tag `<? &hellip; ?>` depending on your configuration and if you are not using inline XML. 
        <ul>
          <li>PHP files are always saved with a `.php` extension.</li>
          <li>Statements in PHP must end with a semi-colon. They are NOT optional.</li>
        </ul>
        <h2>Documentation</h2>
        PHP has a pretty decent documentation. Use it!<br>
        <a target="_blank" href="http://www.php.net/manual/en/">http://www.php.net/</a>
  php: |
        <?php
            echo "Hello World!";
        ?>
  output: Hello World!
- title: "Comments in PHP"
  desc: |
        PHP supports 'C', 'C++' and Unix shell-style (Perl style) comments.
  php: |
        <?php
            echo 'This is a test.'; // This is a one-line c++ style comment
            /* This is a multi line comment
               yet another line of comment */
            echo 'This is yet another test.';
            echo 'One Final Test.'; # This is a one-line shell-style comment
        ?>
  output: This is a test.This is yet another test.One Final Test.
- title: "Output using `echo`"
  desc: |
        There are many ways to output something from PHP and send it to the browser.

        `echo` is the most common way to print something out. It isn't a function per se (it is a language construct), but it can take multiple arguments separated by commas which will end up being concatenated.

        <a target="_blank" href="http://www.php.net/manual/en/function.echo.php">echo at php.net</a>
  php: |
        <?php
            echo "This ", "will be concatenated.";
            echo "There are no new lines added."
        ?>
  output: This will be concatenated.There are no new lines added.
- title: "Output shorthand"
  desc: |
        Sometimes you just need to print a single variable or string using PHP. There is a shorter way than using `echo`: <br>
        <small>Note: This will only work if you have <a target="_blank" href="http://www.php.net/manual/en/ini.core.php#ini.short-open-tag">short_open_tag</a> enabled in your PHP configuration.</small>
  php: <?= "Print this" ?>
  output: Print this
- title: "Output using `print`"
  desc: |
        `print`, contrary to `echo`, only takes a single argument but can work as an expression. `echo` is also slightly faster.

        <a target="_blank" href="http://www.php.net/manual/en/function.print.php">print at php.net</a>
  php: |
        <?php
            (true) ? print "yes" : print "false";
            //(true) ? echo "yes" : echo "false"; // will not work!
        ?>
  output: yes
- title: "Output outside PHP tags"
  desc: |
        Anything that is not inside `<?php &hellip; ?>` tags in PHP is sent directly to the browser. Therefore, you can simply close and open the php tags to send the output. (And yes, doing this works <u>anywhere</u>, even inside functions.)
        <p>
        Due to this, always be wary of whitespace before and after the open and close php tags. (Some features like changing a <a target="_blank" href="http://www.php.net/manual/en/function.header.php">response header</a> require that no output is sent before being used.) A good convention is to omit the <b>last closing</b> PHP tag (slides from now on do this).
        </p>
  php: |
        <?php echo "Hello " ?>
        World<?php echo '!';
  output: Hello World!
- title: "Variables"
  desc: |
        Variables in PHP are similar to Perl (PHP was partly inspired by Perl). They must be prefixed with a dollar sign ($) and cannot start with a number.
        <p>
          There are no type declarations; PHP is weakly typed.
        </p>
  php: |
        <?php
        $a = 2;
        $b = 3;
        $sum = $a + $b;
        echo $sum;
  output: 5
- title: "Data Types: Scalar"
  desc: |
        <ul>
          <li>Boolean: `true` or `false` (case insensitive)</li>
          <li>Integer</li>
          <li>Double</li>
          <li>String</li>
        </ul>
  php: |
        <?php
        $boolean  = true;
        $boolean2 = FALSE;
        $integer  = 1;
        $integer2 = 0xFF; // 255 in hex
        $integer3 = 0377; // 255 in octal
        $double   = 1.0;
        $double2  = 1.0e5;
        $double3  = 7E-10;
        $string   = "My String";

        echo gettype($boolean), ' ', $boolean,   "\n",
             gettype($boolean2), ' ', $boolean2, "\n",
             gettype($integer), ' ', $integer,   "\n",
             gettype($integer2), ' ', $integer2, "\n",
             gettype($integer3), ' ', $integer3, "\n",
             gettype($double), '  ', $double,    "\n",
             gettype($double2), '  ', $double2,  "\n",
             gettype($double3), '  ', $double3,  "\n",
             gettype($string), '  ', $string;
  output: |
          boolean 1
          boolean 
          integer 1
          integer 255
          integer 255
          double  1
          double  100000
          double  7.0E-10
          string  My String
- title: "Data Types: Compound"
  desc: |
        <ul>
          <li>Array</li>
          <li>Object</li>
        </ul>
  php: |
        <?php
        $array = array(1, "two", 3);

        class Car {
            public $make;
            public $model;
            public $year;
        }

        var_dump($array, new Car());
  output: |
          array(3) {
            [0]=>
            int(1)
            [1]=>
            string(3) "two"
            [2]=>
            int(3)
          }
          object(Car)#1 (3) {
            ["make"]=>
            NULL
            ["model"]=>
            NULL
            ["year"]=>
            NULL
          }
- title: "Data Types: Special"
  desc: |
        <ul>
          <li>Resource</li>
          <li>NULL (case insensitive)</li>
        </ul>
  php: |
        <?php

        $handle = fopen("/dev/null", "r");
        $null = null;

        var_dump($handle, $null);
  output: |
          resource(2) of type (stream)
          NULL
- title: "Boolean"
  desc: |
        In PHP the following evaluate to false:
        <ul>
          <li>`false`</li>
          <li>`0`</li>
          <li>`0.0`</li>
          <li>`""`</li>
          <li>`"0"`</li>
          <li>`null`</li>
          <li>array with 0 elements</li>
        </ul>
  php: |
       <?php
       if (false || 0 || 0.0 || "" || "0" || null || array())
       {
          echo "Somebody lied! One was true!";
       }
       else
       {
          echo "OK";
       }
  output: "OK"
- title: "Strings"
  desc: |
        Strings literals use single or double quotation marks as delimiters. The difference is that double quotation marks allow for interpolation.
  php: |
       <?php

       $val = 10 * 10;
       $str = "10 * 10 is $val";

       echo $str;
  output: 10 * 10 is 100
- title: "String concatenation"
  desc: Strings in PHP are concatenated using the `.` operator, not `+`.
  php: |
        <?php
        $str = "\nThis is " . "a concatenated " .
               "string with double quotes (\")";
        echo $str . '.\n$str'; // no interpolation!
  output: |
          
          This is a concatenated string with double quotes (").\n$str
- title: "`NULL`, `unset()`, `isset()`"
  desc: |
        A variable that has been declared but not assigned a value is `NULL` by default.<br>
        <a target="_blank" href="http://www.php.net/manual/en/function.isset.php">`isset()`</a> can be used to check if a variable is set or not.<br>
        <a target="_blank" href="http://www.php.net/manual/en/function.unset.php">`unset()`</a> can be used to unset (destroy) a variable.
  php: |
       <?php

       $myVar;
       $deleteMe = "";

       echo gettype($myVar), "\n"; // We get a PHP Notice here
       
       isset($deleteMe) ? print "set" : print "unset";
       echo "\n", gettype($deleteMe), "\n";

       unset($deleteMe);

       isset($deleteMe) ? print "set" : print "unset";
       echo "\n", gettype($deleteMe);
  output: |


          Notice:  Undefined variable: myVar in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 6

          NULL
          set
          string
          unset


          Notice:  Undefined variable: deleteMe in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 14

          NULL
- title: "Arithmetic"
  desc: |
        Available operators for arithmetic in PHP are: `+`, `-`, `*`, `/`, `%`, `++`, `--`.<br>
        Math function are available as well. <a target="_blank" href="http://www.php.net/manual/en/ref.math.php">See the complete list &raquo;</a>
  php: |
       <?php
       $i = 0;
       echo 1 + 2, "\n";
       echo 10 - 20, "\n";
       echo 10 * 10, "\n";
       echo 1 / 3, "\n";
       echo 3 % 2, "\n";
       echo $i++, "\n";
       echo --$i, "\n\n";

       // Math
       echo floor(20 / 3), "\n";
       echo max(5, 10), "\n";
       echo rand(1, 100), "\n";
       echo pi(), "\n";
       echo M_PI, "\n";
       echo sqrt(-1), "\n"; // Use is_nan() to check for NAN
  output: |
          3
          -10
          100
          0.33333333333333
          1
          0
          0

          6
          10
          81
          3.1415926535898
          3.1415926535898
          NAN
- title: "Type Coercion"
  desc: |
        PHP is weakly typed, which means type coercion will occur if data types differ.
  php: |
       <?php

       echo true . 1, "\n";
       echo true + 1, "\n";
       echo true . "str", "\n\n";
       
       echo false . 1, "\n";
       echo false + 1, "\n";
       echo false . "str", "\n\n";
       
       echo null . "str", "\n";
       echo null + "str", "\n";
       echo null + 1, "\n\n";

       echo "str" . "str", "\n";
       echo "str" + "str", "\n";
       echo "str" + 1, "\n";
       echo "-2 str" + 1, "\n";
       echo "str -2 str" + 1, "\n";
       echo "0.2 str" + 1, "\n";
  output: |
          11
          2
          1str

          1
          1
          str

          str
          0
          1

          strstr
          0
          1
          -1
          1
          1.2
- title: "Type casting, `gettype()`, `settype()`, `*val()`"
  desc: |
        You can explicitly convert to another data type using the `(datatype) $var` syntax, a procedural function such as `int intval(mixed $var)` or using the `settype(mixed &$var, string $type)` function which modifies the variable directly.
  php: |
       <?php
       $str = "-2.75 inside a ";
       echo $str, gettype($str), "\n\n";

       $int = (int) $str;
       $dbl = (double) $str;

       var_dump($int);
       var_dump($dbl);

       $int2 = intval($str);
       $dbl2 = floatval($str); // doubleval() works the same too
       $str2 = strval($dbl2);
       var_dump($int2);
       var_dump($dbl2);

       var_dump($str2);

       settype($dbl2, 'array'); // modifies the variable directly
       var_dump($dbl2);
  output: |
          -2.75 inside a string

          int(-2)
          float(-2.75)
          int(-2)
          float(-2.75)
          string(5) "-2.75"
          array(1) {
            [0]=>
            float(-2.75)
          }
- title: "String Operations"
  desc: |
        Many string functions are made available in the form of procedural functions.
        <a target="_blank" href="http://www.php.net/manual/en/ref.strings.php">See the complete list &raquo;</a>
  php: |
       <?php
       $str = "The quick brown fox jumps over the lazy dog.";

       // Char at...
       echo $str[0], "\n\n";
       
       // Substring
       echo substr($str, 16), "\n";
       echo substr($str, 16, 3), "\n\n";

       // Length of a string
       echo strlen($str), "\n\n";

       // Change case
       echo strtoupper($str), "\n";
       echo strtolower($str), "\n";
       echo ucwords($str), "\n\n";
       
       // Index of
       echo strpos($str, 'fox'), "\n\n";

       // Case insensitive compare (0 means equal)
       echo strcasecmp($str, strtoupper($str)), "\n\n";

       // Make numbers more legible
       echo number_format(12345678, 2), "\n\n";

       // Formatted string
       printf('Hello %1$s %2$d %2$.2f', 'world', 7/3);
  output: |
          T

          fox jumps over the lazy dog.
          fox

          44

          THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.
          the quick brown fox jumps over the lazy dog.
          The Quick Brown Fox Jumps Over The Lazy Dog.

          16

          0

          12,345,678.00

          Hello world 2 2.33
- title: "Predicates: `is_*`"
  desc: |
        The following predicate functions are used to check against datatypes:
        <ul>
          <li>`is_array`</li>
          <li>`is_bool`</li>
          <li>`is_callable`</li>
          <li>`is_float` or `is_double` or `is_real`</li>
          <li>`is_int` or `is_integer` or `is_long`</li>
          <li>`is_object`</li>
          <li>`is_nan`</li>
          <li>`is_null`</li>
          <li>`is_numeric` (int or float or a numeric string)</li>
          <li>`is_resource`</li>
          <li>`is_scalar` (integer, float, string or boolean)</li>
          <li>`is_string`</li>
        </ul>
  php: |
       <?php
       var_dump(is_array(array()));
       var_dump(is_nan(sqrt(-1)));
       var_dump(is_numeric('-10 is negative'));
       var_dump(is_numeric('-10'));
       var_dump(is_callable('pi'));
       var_dump(is_callable('pie'));
  output: |
          bool(true)
          bool(true)
          bool(false)
          bool(true)
          bool(true)
          bool(false)
- title: "Control statements"
  desc: |
        The following control statements are available in PHP:
        <ul>
          <li>if, if-else, elseif</li>
          <li>switch</li>
          <li>while</li>
          <li>do-while</li>
          <li>for</li>
          <li>foreach</li>
          <li>break</li>
          <li>continue</li>
        </ul>
  php: |
       <?php

       $i = 0;

       if ($i == 0) {
           echo "i equals 0";
       } elseif ($i == 1) {
           echo "i equals 1";
       } elseif ($i == 2) {
           echo "i equals 2";
       } else {      
           echo "i equals something else";
       }

       echo "\n";

       switch ($i) {
           case 0:
               echo "i equals 0";
               break;
           case 1:
               echo "i equals 1";
               break;
           case 2:
               echo "i equals 2";
               break;
           default:
               echo "i equals something else";
       }

       echo "\n";

       for($i = 0; $i < 10; $i++) {
           echo $i;
       }


       echo "\n";
       $i = 0;

       while(true) {
           if ($i++ >= 9) {
               break;
           } else {
             #continue; // uncomment to see what happens
           }
           echo $i;
       }
  output: |
          i equals 0
          i equals 0
          0123456789
          123456789
- title: "Comparison, logical and bitwise operators"
  desc: |
        <ul>
          <li>Comparison: `>=`, `<=`, `!=`, `==`</li>
          <li>Strict equality / inequality: `===`, `!==`</li>
          <li>Logical: `!`, `&&`, `||`, `and`, `or`, `xor`
            <ul>
              <li>`and`, `or` have lower priority than `&&` and `||`</li>
              <li>`and`, `or` can be written as `AND`, `OR` (case insensitive)</li>
            </ul>
          </li>
          <li>Bitwise: `&`, `|`, `^`, `~`, `<<`, `>>`</li>
        </ul>
  php: |
       <?php

       // Strict equality
       var_dump(12 == '12');
       var_dump(12 === '12');
  output: |
          bool(true)
          bool(false)
- title: "Arrays"
  desc: |
        Arrays in PHP can have values of mixed types. They can also have a key (otherwise known as a hash map, but in PHP it's usually called an associative array).
  php: |
       <?php

       $arr1 = array('one', 'two', 'three');
       $arr2 = array(0 => "Zero", 5 => "Five", 10 => "Ten");
       $arr3 = array("one" => 1, "two" => 2, "three" => 3);

       $bad = array(
           1    => "a",
           "1"  => "b",
           1.5  => "c",
           true => "d");
      

       print_r($arr1);
       print_r($arr2);
       print_r($arr3);
       print_r($bad);

       // Accessing an element
       var_dump($arr1[0]);
       var_dump($arr3["three"]);
  output: |
          Array
          (
              [0] => one
              [1] => two
              [2] => three
          )
          Array
          (
              [0] => Zero
              [5] => Five
              [10] => Ten
          )
          Array
          (
              [one] => 1
              [two] => 2
              [three] => 3
          )
          Array
          (
              [1] => d
          )
          string(3) "one"
          int(3)
- title: "Array length"
  desc: |
        To get the length of an array, use `count()` or `sizeof()`.
  php: |
       <?php

       $arr = array(1, 2, 3);
       echo count($arr), "\n";
       echo sizeof($arr);
  output: |
          3
          3
- title: "Multi-dimensional arrays"
  desc: |

  php: |
       <?php
       $arr = array(array('1', '2', '3'), array('4', '5', '6'));

       print_r($arr);

       // Accessing an element
       var_dump($arr[1][0]);

       // Create new array on the spot
       $arr2['level0']['level1'] = "0";
       print_r($arr2);
  output: |
          Array
          (
              [0] => Array
                  (
                      [0] => 1
                      [1] => 2
                      [2] => 3
                  )

              [1] => Array
                  (
                      [0] => 4
                      [1] => 5
                      [2] => 6
                  )

          )
          string(1) "4"
          Array
          (
              [level0] => Array
                  (
                      [level1] => 0
                  )

          )
- title: "Arrays: `foreach`"
  desc: |
        Iterating over elements in PHP is easy using the `foreach` construct.
  php: |
       <?php

       $arr = array(1 => "one", "two", "three"); // 1 based index magic!

       // Simple foreach loop
       foreach($arr as $value) {
           echo $value, "\n";
       }

       // Also retrieve the key
       foreach($arr as $key => $value) {
           echo "[$key] = $value\n";
       }

       // Pass by reference (&) allows to modify value
       foreach($arr as $key => &$value) {
           $value = strtoupper($value);
       }

       print_r($arr);
  output: |
          one
          two
          three
          [1] = one
          [2] = two
          [3] = three
          Array
          (
              [1] => ONE
              [2] => TWO
              [3] => THREE
          )
- title: "Arrays: internal pointer"
  desc: |
        Iterating over elements is also possible by moving around the internal pointer.
        <ul>
          <li>`current()` returns the element at the current position</li>
          <li>`next()` moves pointer to the next element and return it</li>
          <li>`prev()` moves pointer to the previous element and return it</li>
          <li>`reset()` resets the pointer to the first element and return it</li>
          <li>`end()` moves the pointer to the last element and return it</li>
        </ul>
  php: |
       <?php

       $arr = array('foot', 'bike', 'car', 'plane');

       do {
           echo current($arr), "\n";
       } while(next($arr));
  output: |
          one
          two
          three
          [1] = one
          [2] = two
          [3] = three
          Array
          (
              [1] => ONE
              [2] => TWO
              [3] => THREE
          )
- title: "Arrays: `unset()`"
  desc: |
        Array elements can be removed using `unset()`. This does not provoke a reorder of indexes.
  php: |
       <?php

       $arr = array(1, 2, 3);

       unset($arr[1]);
       print_r($arr);
  output: |
          Array
          (
              [0] => 1
              [2] => 3
          )
- title: "Arrays: `array_key_exists()`"
  desc: |
        To check if an array key exists, use `array_key_exists(mixed $key, array $array)`.
  php: |
       <?php

       $arr = array('one' => 1, 'two' => 2, 'three' => 3);

       var_dump(array_key_exists('three', $arr));
       var_dump(array_key_exists('four', $arr));
  output: |
          bool(true)
          bool(false)
- title: "Arrays: `array_search()` and `in_array()`"
  desc: |
        To check if an array contains a certain value, you can use `mixed array_search(mixed $needle, array $haystack[, bool $strict = false])` to find the key. Use `bool in_array(mixed $needle, array $haystack[, bool $strict = false])` to return true or false.
  php: |
       <?php

       $arr = array('one' => 1, 'two' => 2, 'three' => 3);

       var_dump(array_search(3, $arr));
       var_dump(in_array(3, $arr));
       var_dump(array_search("3", $arr, true));
       var_dump(array_search(4, $arr));
  output: |
          string(5) "three"
          bool(true)
          bool(false)
          bool(false)
- title: "Arrays: `explode()` and `implode()`"
  desc: |
        You can take a string and turn it into an array at a each specified delimiter
        using `explode()`.<br>
        To join an array back into a string, you can use `implode()` and specify a delimiter.
  php: |
       <?php

       $str = "The quick brown fox jumps over the lazy dog.";

       $arr = explode(' ', $str);
       print_r($arr);

       print_r(implode('-', $arr));
  output: |
          string(5) "three"
          bool(true)
          bool(false)
          bool(false)
- title: "Filling an array"
  desc: |
        Since PHP keeps an internal pointer of the current element,
        you can append new elements to the end of an array using `$arrayVar[]`.
  php: |
       <?php

       $arr = array();

       for($i = 1; $i <= 5; $i++) {
           $arr[] = $i;
       }

       print_r($arr);
  output: |
          Array
          (
              [0] => 1
              [1] => 2
              [2] => 3
              [3] => 4
              [4] => 5
          )
- title: "`array_push()`, `array_pop`, `array_unshift`, `array_shift`"
  desc: |
        Append new elements to the end of an array using `array_push()` and
        `array_pop()` to remove the last element and return it.<br>
        Similarly, `array_unshift()` will prepend elements and `array_shift`
        will remove the first element of the array.
  php: |
       <?php

       $arr = array();

       for($i = 1; $i <= 5; $i++) {
           array_push($arr, $i, $i++);
       }

       print_r($arr);
       var_dump(array_pop($arr));
       print_r($arr);

       $arr2 = array('March', 'April');
       array_unshift($arr2, 'January', 'February');
       print_r($arr2);
       var_dump(array_shift($arr2));
       print_r($arr2);
  output: |
          Array
          (
              [0] => 1
              [1] => 2
              [2] => 3
              [3] => 4
              [4] => 5
          )
- title: "Sorting an array"
  desc: |
        <table class="doctable table">
            <caption>
                <strong>Sorting function attributes</strong>
            </caption>
            <thead>
                <tr>
                    <th>
                        Function name
                    </th>
                    <th>
                        Sorts by
                    </th>
                    <th>
                        Maintains key association
                    </th>
                    <th>
                        Order of sort
                    </th>
                    <th>
                        Related functions
                    </th>
                </tr>
            </thead>
            <tbody class="tbody">
                <tr>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.array-multisort.php" class="function">array_multisort()</a></span>
                    </td>
                    <td>
                        value
                    </td>
                    <td>
                        associative yes, numeric no
                    </td>
                    <td>
                        first array or sort options
                    </td>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.array-walk.php" class="function">array_walk()</a></span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.asort.php" class="function">asort()</a></span>
                    </td>
                    <td>
                        value
                    </td>
                    <td>
                        yes
                    </td>
                    <td>
                        low to high
                    </td>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.arsort.php" class="function">arsort()</a></span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.arsort.php" class="function">arsort()</a></span>
                    </td>
                    <td>
                        value
                    </td>
                    <td>
                        yes
                    </td>
                    <td>
                        high to low
                    </td>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.asort.php" class="function">asort()</a></span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.krsort.php" class="function">krsort()</a></span>
                    </td>
                    <td>
                        key
                    </td>
                    <td>
                        yes
                    </td>
                    <td>
                        high to low
                    </td>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.ksort.php" class="function">ksort()</a></span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.ksort.php" class="function">ksort()</a></span>
                    </td>
                    <td>
                        key
                    </td>
                    <td>
                        yes
                    </td>
                    <td>
                        low to high
                    </td>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.asort.php" class="function">asort()</a></span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.natcasesort.php" class="function">natcasesort()</a></span>
                    </td>
                    <td>
                        value
                    </td>
                    <td>
                        yes
                    </td>
                    <td>
                        natural, case insensitive
                    </td>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.natsort.php" class="function">natsort()</a></span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.natsort.php" class="function">natsort()</a></span>
                    </td>
                    <td>
                        value
                    </td>
                    <td>
                        yes
                    </td>
                    <td>
                        natural
                    </td>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.natcasesort.php" class="function">natcasesort()</a></span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.rsort.php" class="function">rsort()</a></span>
                    </td>
                    <td>
                        value
                    </td>
                    <td>
                        no
                    </td>
                    <td>
                        high to low
                    </td>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.sort.php" class="function">sort()</a></span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.shuffle.php" class="function">shuffle()</a></span>
                    </td>
                    <td>
                        value
                    </td>
                    <td>
                        no
                    </td>
                    <td>
                        random
                    </td>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.array-rand.php" class="function">array_rand()</a></span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.sort.php" class="function">sort()</a></span>
                    </td>
                    <td>
                        value
                    </td>
                    <td>
                        no
                    </td>
                    <td>
                        low to high
                    </td>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.rsort.php" class="function">rsort()</a></span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.uasort.php" class="function">uasort()</a></span>
                    </td>
                    <td>
                        value
                    </td>
                    <td>
                        yes
                    </td>
                    <td>
                        user defined
                    </td>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.uksort.php" class="function">uksort()</a></span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.uksort.php" class="function">uksort()</a></span>
                    </td>
                    <td>
                        key
                    </td>
                    <td>
                        yes
                    </td>
                    <td>
                        user defined
                    </td>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.uasort.php" class="function">uasort()</a></span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.usort.php" class="function">usort()</a></span>
                    </td>
                    <td>
                        value
                    </td>
                    <td>
                        no
                    </td>
                    <td>
                        user defined
                    </td>
                    <td>
                        <span class="function"><a target="_blank" href="http://php.net/manual/en/function.uasort.php" class="function">uasort()</a></span>
                    </td>
                </tr>
            </tbody>
        </table>

        <a target="_blank" href="http://www.php.net/manual/en/array.sorting.php">See docs &raquo;</a>
  php: |
       <?php

       $arr = array();

       for($i = 1; $i <= 10; $i++) {
           $arr[] = rand(0, 100);
       }
       sort($arr);
       print_r($arr);
  output: false
- title: "Array copy"
  desc: |

  php: |
       <?php
       $arr1 = array(2, 3);
       $arr2 = $arr1;
       $arr2[] = 4;

       print_r($arr1); // stays unchanged
       print_r($arr2);
                    
       $arr3 = &$arr1; // pass by reference (&)
       $arr3[] = 4;

       // now $arr1 and $arr3 are the same
       print_r($arr1); 
       print_r($arr3);
- title: "Constants"
  desc: |
        You can declare variable to be constants in PHP.
        Constants cannot change value during the execution of the script.
        
        Use `defined()` to check if a constant was defined.
  php: |
       <?php
       define('MAX', 10);
       const MIN = 0; // PHP 5.3.0+
       var_dump(MAX, MIN);
       
       define('MAX', 20); // illegal redefinition
       #MAX = 20; // parse error
       
       // Case sensitivity
       define('TMP_FOLDER', '/tmp', true);
       var_dump(TMP_FOLDER, TMP_folder);
       
       // Undefined constant
       var_dump(IMG_FOLDER);
       
       (defined('IMG_FOLDER')) ? print "defined" : print "undefined";
  output: |
          int(10)
          int(0)


          Notice:  Constant MAX already defined in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 6

          string(4) "/tmp"
          string(4) "/tmp"


          Notice:  Use of undefined constant IMG_FOLDER - assumed 'IMG_FOLDER' in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 14

          string(10) "IMG_FOLDER"
          undefined
- title: "Functions: declaration"
  desc: |
        Functions in PHP have case insensitive names and can have an arbitrary number of arguments.
        You do not need to declare the function before using it: it can be defined later in the document.
  php: |
       <?php
       
       $sum = add(2, 5);
       
       function add($a, $b) {
           return $a + $b;
       }
  output: false
- title: "Functions: parameters"
  desc: |
        If you supply less than the required parameters, PHP will throw a warning and notices about the parameter variables that are being referenced but undefined.
        
        Supplying more variables than in the definition is simply ignored.
  php: |
       <?php
       
       function add($a, $b) {
           return $a + $b;
       }
       
       // Right amount of params
       echo ADD(2, 5), "\n";
       
       // Missing params
       echo add(), "\n";
       
       // Extra params
       echo add(1, 2, 3), "\n";
  output: |
          7


          Warning:  Missing argument 1 for add(), called in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 11 and defined in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 3



          Warning:  Missing argument 2 for add(), called in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 11 and defined in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 3



          Notice:  Undefined variable: a in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 4



          Notice:  Undefined variable: b in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 4

          0
          3
- title: "Functions: overloading"
  desc: |
        Overloading in PHP is not possible and throws a fatal error.
  php: |
       <?php
       
       function add($a, $b) {
       }
       
       function add($a, $b) {
           return $a + $b;
       }
  output: |
          Fatal error:  Cannot redeclare add() (previously declared in
          /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code:3) in
          /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 8
- title: "Functions: nesting"
  desc: |
        You can nest functions in PHP. Note however that the nested functions must be defined before they can be used.
  php: |
       <?php
       
       function calc_sum() {
           #add(2, 2); // Will not work
           function add($a, $b) {
               return $a + $b;
           }
           return add(2, 4);
       }
       
       echo calc_sum();
  output: 6
- title: "Functions: pass-by-value vs pass-by-reference"
  desc: |
        Parameters in PHP are passed by value (i.e. a copy) by default.
        
        To pass by reference instead, you can add an ampersand (`&`) in front of the variable name (e.g. `&$var`).
  php: |
       <?php
       
       // Try changing $value to &$value
       function increment($value) {
           $value = $value + 1;
       }
       
       $val = 1;
       increment($val);
       
       var_dump($val);
  output: int(1)
- title: "Functions: return"
  desc: |
        PHP allows you to return any data type, including arrays and objects. You can even return a reference by adding an ampersand (`&`) in front of the function name.
        
        If you do not use the `return` keyword, nothing is returned.
  php: |
       <?php
       
       // prepend() returns a reference to the $str variable that
       // was created in the function instead of a copy of the value
       function &prepend($str) {
           $str = "_" . $str;
           return $str;
       }
       
       $result = prepend('test');
       
       var_dump($result);
  output: string(5) "_test"
- title: "Variable scope"
  desc: |
        Variables are always bound to the function scope.
        
        To access the global scope, you must use the `global` keyword with the variable name to redefine the variable under the current scope.
        
        You could also just use the `$GLOBALS` predefined variable to access variables defined in the global scope (this is not recommended however).
        
        <a target="_blank" href="http://www.php.net/manual/en/language.variables.scope.php">
          More at php.net &raquo;</a>
  php: |
       <?php
       
       $local1 = "local1";
       $local2 = "local2";
       
       function test_scope() {
           global $local2, $newvar;
           
           $local3 = "local3";
           $newvar = "in func";
           
           echo $local1, "\n"; // not in scope
           echo $local2, "\n";
           echo $GLOBALS['local1'], "\n"; // alternative
       }
       
       test_scope();
       echo $local3; // not in scope
       echo $newvar;
  output: |
          Notice:  Undefined variable: local1 in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 13


          local2
          local1


          Notice:  Undefined variable: local3 in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 19

          in func
- title: "Static variables"
  desc: |
        Static variables exist only in a local function scope, but do not lose their value when program execution leaves its scope.
        
        The value at declaration cannot be an expression as static declarations are resolved in compile-time.
  php: |
       <?php
       
       function counter() {
           static $i = 0; // try 0 + 0 as value
           $i++;
           if ($i > 2) {
               echo $i;
           }
       }
       
       counter();
       counter();
       counter();
  output: |
          int(10)
          int(0)


          Notice:  Constant MAX already defined in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 6

          string(4) "/tmp"
          string(4) "/tmp"


          Notice:  Use of undefined constant IMG_FOLDER - assumed 'IMG_FOLDER' in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 14

          string(10) "IMG_FOLDER"
          undefined
- title: "Pattern matching"
  desc: |
  
        <ul>
          <li>
            <a target="_blank" href="http://www.php.net/manual/en/function.preg-filter.php">preg_filter</a> — Perform a regular expression search and replace
          </li>
          <li>
            <a target="_blank" href="http://www.php.net/manual/en/function.preg-grep.php">preg_grep</a> — Return array entries that match the pattern
          </li>
          <li>
            <a target="_blank" href="http://www.php.net/manual/en/function.preg-last-error.php">preg_last_error</a> — Returns the error code of the last PCRE regex execution
          </li>
          <li>
            <a target="_blank" href="http://www.php.net/manual/en/function.preg-match-all.php">preg_match_all</a> — Perform a global regular expression match
          </li>
          <li>
            <a target="_blank" href="http://www.php.net/manual/en/function.preg-match.php">preg_match</a> — Perform a regular expression match
          </li>
          <li>
            <a target="_blank" href="http://www.php.net/manual/en/function.preg-quote.php">preg_quote</a> — Quote regular expression characters
          </li>
          <li>
            <a target="_blank" href="http://www.php.net/manual/en/function.preg-replace-callback.php">preg_replace_callback</a> — Perform a regular expression search and replace using a callback
          </li>
          <li>
            <a target="_blank" href="http://www.php.net/manual/en/function.preg-replace.php">preg_replace</a> — Perform a regular expression search and replace
          </li>
          <li>
            <a target="_blank" href="http://www.php.net/manual/en/function.preg-split.php">preg_split</a> — Split string by a regular expression
          </li>
        </ul>        
        <h2>`preg_match`</h2>
        Returns true or false if a string matches the regular expression. Optionally, it can return the matches (capturing parentheses' content) if you supply a third parameter.
        
  php: |
       <?php
       
       preg_match('/^(?:http:\/\/)?([^\/]+)/i',
           "http://users.encs.concordia.ca/index.html", $matches);
       $host = $matches[1];
       
       echo $host;
  output: users.encs.concordia.ca
- title: "Pattern matching: `preg_split`"
  desc: |
        If you want to use the power of regular expressions to split a string you can use `preg_split` instead of `explode`.
  php: |
       <?php

       $str = "The quick brown fox jumps over the lazy dog.";

       $arr = preg_split('/( |\.)/', $str);

       print_r($arr);
  output: |
          Array
          (
              [0] => The
              [1] => quick
              [2] => brown
              [3] => fox
              [4] => jumps
              [5] => over
              [6] => the
              [7] => lazy
              [8] => dog
              [9] => 
          )
- title: "Classes and Objects"
  desc: |
        Starting PHP version 5, a lot of Object Oriented Programming concepts are available in PHP. (Version 4 had very limited OOP concepts.) Here are some concepts that are available in version 5.1+:
        <ul>
          <li>Class constants</li>
          <li>Constructors & destructors</li>
          <li>Visibility (public, protected, private)</li>
          <li>`static` and `final` keywords</li>
          <li>Class abstraction</li>
          <li>Interfaces</li>
          <li>Inheritance</li>
          <li>Overloading</li>
          <li>Type hinting</li>
        </ul>
        <a target="_blank" href="http://www.php.net/manual/en/language.oop5.php">
          Full docs at php.net &raquo;</a>
  php: |
        <?php
        class SimpleClass
        {
            // property declaration
            private $var = 'a default value';
    
            // constructor declaration
            public function __construct($var) {
                $this->var = $var;
            }

            // method declaration
            public function displayVar() {
                echo $this->var;
            }
    
            public function &getVar() {
                return $this->var;
            }
    
            public function setVar($newValue) {
                $this->var = $newValue;
            }
        }

        $sc = new SimpleClass("Hi");
        $sc->displayVar();

        $var = &$sc->getVar();
        $sc->setVar('Bye');

        echo $var;


        $sc->var = 'Ciao'; // not allowed because var is private
  output: |
          HiBye

          Fatal error:  Cannot access private property SimpleClass::$var in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 35

- title: "Classes: type hinting"
  desc: |
        You can force parameters to be of a certain type of object in PHP.
        
        You cannot however specify a scalar like `int` or `string`. You should use <a href="#19">is_* predicates</a> to check their type instead.
  php: |
        <?php

        class User {
            public $name;
   
            public function __construct(Name $name) {
                $this->name = $name;
            }
        }

        class Name {
            public $first;
            public $last;
    
            public function __construct($first, $last) {
                $this->first = $first;
                $this->last = $last;
            }
        }

        $user1 = new User(new Name('Obi-Wan', 'Kenobi'));
        $user2 = new User('R2-D2'); // Not of type Name
        
  output: |
          Catchable fatal error:  Argument 1 passed to User::__construct() must be an instance of Name, string given, called in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 22 and defined in /Users/istvanp/Repositories/tutorials/php/eval.php(4) : eval()'d code on line 6
          
- title: "Predefined Variables"
  desc: |
        PHP provides nine "<a target="_blank" href="http://www.php.net/manual/en/language.variables.superglobals.php">superglobals</a>" (accessible globally):
        <ul>
          <li>`GLOBALS` contains all variables in the global scope</li>
          <li>`_GET` data sent to the PHP script via a GET request</li>
          <li>`_POST` data sent to the PHP script via a POST request</li>
          <li>`_COOKIE` cookies sent by the client's browser</li>
          <li>`_FILES` file information sent via `<input type="file" />`</li>
          <li>`_SESSION` session variables available to the the current script</li>
          <li>`_REQUEST` is `_GET` + `_POST` + `_COOKIE` in one array</li>
          <li>`_SERVER` information about the server environment</li>
          <li>`_ENV` environment variables that are available to PHP</li>
        </ul>
  php: |
       <?php
       echo htmlspecialchars(print_r($_GET, 1));
       print_r($_SERVER);
  output: false
- title: "Working with forms"
  pre: false
  desc: |
        PHP can be used to process forms. All you need to do is to set the action attribute of the form to the PHP document that will handle the processing of the form data. This document can be the same as the document that was used to output the form.
        
        <h2>Retrieving values</h2>
        Depending how the request was sent, you can retrieve the form values that the user inputed via `$_GET` or `$_POST` and use the names of the input fields as the keys. PHP also provides the `$_REQUEST` global variable which merges both into one as convenience.
        
        <h2>Checkboxes</h2>
        <p>Because we may want to use checkboxes for multiple choice, we would prefer to receive the data as an array instead of having to assign unique names to each checkbox (otherwise only one value is returned). In PHP you can simply have the name of each group of checkboxes appended with a `[]` and the results will be return as array.</p>
        <a target="_blank" href="http://users.encs.concordia.ca/~i_puszta/tutorials/php/scripts/49.php">Submit to the same page example &raquo;</a> (<a target="_blank" href="http://users.encs.concordia.ca/~i_puszta/tutorials/php/scripts/49.phps">code</a>)
  php: |
       <form action="http://users.encs.concordia.ca/~i_puszta/echo.php"
             method="POST" target="_blank">
         <label>
           Name:
           <input type="text" name="name" />
         </label><br/><br/>
         <label>
           <input type="radio" name="gender" value="m" /> Male
         </label>
         <label>
           <input type="radio" name="gender" value="f" /> Female
         </label><br/><br/>
         Interests:<br/>
         <label><input type="checkbox" name="interests[]"
           value="art" /> Art</label><br/>
         <label><input type="checkbox" name="interests[]"
           value="books" /> Books</label><br/>
         <label><input type="checkbox" name="interests[]"
           value="fashion" /> Fashion</label><br/>
         <label><input type="checkbox" name="interests[]"
           value="gaming" /> Gaming</label><br/>
         <label><input type="checkbox" name="interests[]"
           value="tech" /> Technology</label><br/>
         <label><input type="checkbox" name="interests[]"
           value="travel" /> Travel</label><br/>
         <label><input type="checkbox" name="interests[]"
           value="other" /> Other</label><br/>
         <p>
           <input type="submit" />
         </p>
       </form>
- title: "`include()` directive"
  desc: |
        To help organize your code better, you can use the `include()`, `include_once()`, `require()` or `require_once()` functions to include external PHP documents into another. The content of these files can be HTML or PHP or a mixture of both. You could use it even to always include the same header and footer for all your web pages.
        <p>
          <a target="_blank" href="http://users.encs.concordia.ca/~i_puszta/header.inc.php">header.inc.php &raquo;</a><br>
          <a target="_blank" href="http://users.encs.concordia.ca/~i_puszta/footer.inc.php">footer.inc.php &raquo;</a>
        </p>
  php: |
       <?php include('header.inc.php'); ?>
       <h2>My Page</h2>
       <?php include('footer.inc.php'); ?>
  pre: false
  output: |
          <h1>My Website</h1>
          <h2>My Page</h2>
          © 2013 My Website.
- title: "Cookies"
  desc: |
        Cookies allow you to save limited amount of information into a visitor's browser. Here are a few things to note about cookies:
        <ul>
            <li>They are created when you visit a web page.</li>
            <li>They may persist only until you exit your browser (referred to as session cookies).</li>
            <li>They otherwise persist for a predetermined amount of time (as set by the developer).</li>
            <li>They are not transferrable to another domain (or even subdomain in some cases), another browser client or computer.</li>
            <li>They may be destroyed by the user (by clearing cookies in their browser).</li>
            <li>They can be forged (modified by users maliciously).</li>
            <li>The information stored in the cookie is sent on every GET request you make, even when loading an image.</li>
            <li>Up to 4KB of data (about 600 words long text) can be contained in the cookie.</li>
        </ul>
        <h2>`setcookie()`</h2>
        `bool setcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )`<br>
        The first parameter is the name of the cookie, then the value and then the expire time (as a UNIX timstamp format). If you do not specify a expire time, the cookie will become a session cookie (deleted when the user closes the browser).
        <p>
          <a target="_blank" href="http://ca3.php.net/manual/en/function.setcookie.php">setcookie()</a><br>
          <a target="_blank" href="http://ca3.php.net/manual/en/function.time.php">time() &raquo;</a><br>
          <a target="_blank" href="http://ca3.php.net/manual/en/function.mktime.php">mktime() &raquo;</a><br>
        </p>
  php: |
       <?php

       if ( ! isset($_COOKIE['mycookie']))
       {
           $value = date(DATE_RFC822); // Tue, 19 Mar 13 12:35:47 -0400

           setcookie("mycookie", $value); // A session cookie
           setcookie("mycookie", $value, time() + 60 * 60); // Expires in 1 hour

           echo "This is your first visit!";
       }
       else
       {
           echo "First visit was on " . $_COOKIE['mycookie'];
       }
- title: "Deleting a cookie"
  desc: |
        To delete a cookie, you simply must set it again with a time that is in the past. The browser will then proceed to delete the cookie.

        The value of the cookie does not have to be the same.
  php: |
       <?php
       
       setcookie("mycookie", "", 0);
       // Go back to the previous slide and see that it worked!
- title: "Sending content before modifiying headers"
  desc: |
        You are unable to call functions that modifiy the HTTP response headers such as <a target="_blank" href="http://ca3.php.net/manual/en/function.header.php">`header()`</a>, <a href="http://php.net/manual/en/function.session-start.php" target="_blank">`session_start()`</a> and `setcookie()`.


        
        <strong>Note:</strong> The example code the runs on this page will work due to the way these interactive slides work.

        <a href="http://users.encs.concordia.ca/~i_puszta/setcookie2.php" target="_blank">See the same code in a new window instead.</a>

  php: |
       <h1>Content sent before modifying headers</h1>
       No cookies will be saved.
       <?php setcookie("foo", "bar"); ?>
  output: |
          Content sent before modifying headers

          No cookies will be saved. Warning: Cannot modify header information - headers already sent by (output started at /nfs/home/i/i_puszta/setcookie2.php:3) in /nfs/home/i/i_puszta/setcookie2.php on line 3
- title: "PHP Sessions"
  desc: |
        Sessions are similar to cookies as they allow arbitrary data to be stored about a user or client. The difference however is that the information is not saved in the client's browser but on the server side, which of course is more secure. The other advantage is the there is no limit in how much information you save.
        <p>
          <a href="http://php.net/manual/en/function.session-start.php" target="_blank">session_start() &raquo;</a>
        </p>
  php: |
       <?php
       session_start(); // Needed in order to store the session ID into a cookie

       if ( ! isset($_SESSION['first_visit']))
       {
           $value = date(DATE_RFC822); // Tue, 19 Mar 13 12:35:47 -0400

           $_SESSION['first_visit'] = $value;

           echo "This is your first visit!";
       }
       else
       {
           echo "First visit was on " . $_SESSION['first_visit'];
       }

- title: "Deleting a session variable"
  desc: |
        Simply call unset() on the key in `$_SESSION`.
  php: |
       <?php
       session_start();

       $_SESSION['now'] = time();
       print_r($_SESSION);

       unset($_SESSION['now']);
       print_r($_SESSION);
- title: "Destroying sessions"
  desc: |
        `session_destroy()` destroys all of the data associated with the current session. It does not unset any of the global variables associated with the session, or unset the session cookie.

        In order to kill the session altogether, like to log the user out, the session id must also be unset. If a cookie is used to propagate the session id (default behavior), then the session cookie must be deleted. `setcookie()` may be used for that.
        <p>
          <a href="http://php.net/manual/en/function.session-destroy.php" target="_blank">session_destroy() &raquo;</a>
        </p>
  php: |
       <?php
       session_start();

       print_r($_SESSION);

       $_SESSION = array(); // Delete ALL the data
       session_destroy(); // Now destroy the session

       print_r($_SESSION);
- title: "Reading a file"
  desc: |
        The easiest way to read a file is to use the `file_get_contents()` function. It will read the entire file into a string. It can even fetch web page contents.

        <p>
          <a href="http://php.net/manual/en/function.file-get-contents.php" target="_blank">file_get_contents() &raquo;</a>
        </p>
  php: |
       <?php

       $file   = file_get_contents('input.txt');
       $google = file_get_contents('http://www.google.com/humans.txt');
       
       echo $file, "\n\n<hr>\n", $google;
- title: "Reading a file: complicated edition"
  desc: |
        If you need more control, you can use `fopen()` to get a handle on the file then `fread()` to read bytes from it.

        <h2>One character at a time</h2>
        To read only a single character at a time, use `fgetc()`.
        ```
        <?php
        $fp = fopen('somefile.txt', 'r');
        if (!$fp) {
            echo 'Could not open file somefile.txt';
        }
        while (false !== ($char = fgetc($fp))) {
            echo "$char\n";
        }
        ```
        <h2>Jumping ahead</h2>
        You might want to partially read a file by jumping to a certain byte offset. To do so use `fseek()`.
        ```
        <?php
        $fp = fopen('somefile.txt', 'r');

        // read some data
        $data = fgets($fp, 4096);

        // move back to the beginning of the file
        // same as rewind($fp);
        fseek($fp, 0);
        ```
        <p>
          <a href="http://php.net/manual/en/function.fopen.php" target="_blank">fopen() &raquo;</a><br>
          <a href="http://php.net/manual/en/function.fread.php" target="_blank">fread() &raquo;</a><br>
          <a href="http://php.net/manual/en/function.fseek.php" target="_blank">fseek() &raquo;</a><br>
          <a href="http://php.net/manual/en/function.fgetc.php" target="_blank">fgetc() &raquo;</a><br>
          <a href="http://php.net/manual/en/function.fclose.php" target="_blank">fclose() &raquo;</a>
        </p>
  php: |
       <?php
       $filename = "input.txt";
       $handle = fopen($filename, "r");
       $contents = fread($handle, filesize($filename));
       fclose($handle);
 
       echo $contents;

- title: "Writing to a file"
  desc: |
        The easiest way to write to a file is to use the `file_put_contents()` function. It will write your string into the specified filename.

        <p>
          <a href="http://php.net/manual/en/function.file-put-contents.php" target="_blank">file_put_contents() &raquo;</a><br>
          <a href="output.txt" target="_blank">What was (last) written? &raquo;</a>
        </p>
  php: |
       <?php

       $filename = "output.txt";
       $data = date(DATE_RFC822) . "\n" .
               $_SERVER['HTTP_USER_AGENT'] . "\n" .
               $_SERVER['REMOTE_ADDR'];

       if (is_writable($filename))
       {
          file_put_contents($filename, $data);
          echo "Wrote " . strlen($data) . " bytes.";
       }
       else
       {
          echo "$filename is not writable.";
       }

- title: "Writing to a file: complicated edition"
  desc: |
        If you need more control, you can use `fopen()` to get a handle on the file then `fwrite()` to write bytes to it.

        <p>
          <a href="http://php.net/manual/en/function.fopen.php" target="_blank">fopen() &raquo;</a><br>
          <a href="http://php.net/manual/en/function.fwrite.php" target="_blank">fwrite() &raquo;</a><br>
          <a href="output.txt" target="_blank">What was (last) written? &raquo;</a>
        </p>
  php: |
       <?php

       $filename = "output.txt";
       $data = date(DATE_RFC822) . "\n" .
               $_SERVER['HTTP_USER_AGENT'] . "\n" .
               $_SERVER['REMOTE_ADDR'];

       if (is_writable($filename))
       {
           if ( ! $handle = fopen($filename, 'w'))
           {
                echo "Cannot open file $filename.";
                exit;
           }

           $bytes_written = fwrite($handle, $data);

           if ($bytes_written === FALSE)
           {
               echo "Cannot write to file $filename.";
               exit;
           }

           echo "Wrote $bytes_written bytes.";
           fclose($handle);
       }
       else
       {
          echo "$filename is not writable.";
       }