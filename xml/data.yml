- title: "XML: The Syntax"
  desc: |
        <ul>
          <li>Case sensitive</li>
          <li>Open tags must be closed (or self-closed like `<br />`)</li>
          <li>Attribute values must be quoted strings (`""`)</li>
          <li>Presence of the XML declaration line (`<?xml version="1.0" encoding="UTF-8"?>`) </li>
          <li>Presence of a root element</li>
          <li>Proper element nesting</li>
          <li>Optional reference to
            <ul>
              <li>DTD (Document Type Definition)</li>
              <li>XSD (XML Schema Definition)</li>
              <li>XML Stylesheet</li>
              <li>XSLT (EXtensible Stylesheet Language)</li>
            </ul>
          </li>
        </ul>
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <!DOCTYPE users [
         <!ELEMENT users (user)*>
         <!ELEMENT user (name, birthday?, address?)>
         <!ATTLIST user
            id     CDATA         #REQUIRED
            gender (male|female) #IMPLIED
         >
         <!ELEMENT name (#PCDATA)>
         <!ELEMENT birthday (#PCDATA)>
         <!ELEMENT address (city, country)>
         <!ELEMENT city (#PCDATA)>
         <!ELEMENT country (#PCDATA)>
       ]>
       <users>
         <user id="1" gender="male">
           <name>Tux The Penguin</name>
           <birthday>1996-05-02</birthday>
         </user>
       </users>
- title: "Comments"
  desc: |
        Like in HTML you can use `<!-- comment -->` for comments.
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <!-- This is a comment -->
       <book/>
- title: "Entity References"
  desc: |
        <p>In XML you cannot use the `<` or `&` symbols unless you are opening a tag or referencing an entity respectively. If you mean to use these for what they represent, you should use their entity equivalent instead.</p>
        <table>
            <caption>Pre-defined enities in XML</caption>
            <tbody>
                <tr>
                    <td>&amp;lt;</td>
                    <td>&lt;</td>
                    <td>less than</td>
                </tr>
                <tr>
                    <td>&amp;gt;</td>
                    <td>&gt;</td>
                    <td>greater than</td>
                </tr>
                <tr>
                    <td>&amp;amp;</td>
                    <td>&amp;</td>
                    <td>ampersand&nbsp;</td>
                </tr>
                <tr>
                    <td>&amp;apos;</td>
                    <td>'</td>
                    <td>apostrophe</td>
                </tr>
                <tr>
                    <td>&amp;quot;</td>
                    <td>"</td>
                    <td>quotation mark</td>
                </tr>
            </tbody>
        </table>
        We will later see how to define your own when we get to DTDs.
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <todo>
         <item>Buy <= 2% skimmed milk</item>
       </todo>
- title: "Elements & Attributes"
  desc: |
        An element is defined as anything starting from an open tag until the close tag of the same element.<br>
        Elements can have <strong>attributes</strong> defined in the start tag.<br>
        Between the open and start tag, an element can contain text or one or more other elements.
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <todo>
         <item>Buy &lt;= 2% skimmed milk</item>
         <item priority="1">Prepare for test on XML</item>
       </todo>
- title: "Element or attribute?"
  desc: |

        ```
        <person dob="1940-11-27">
          <firstname>Bruce</firstname>
          <lastname>Lee</lastname>
        </person>
        ```
        ```
        <person>
          <firstname>Bruce</firstname>
          <lastname>Lee</lastname>
          <gender>male</gender>
          <dob>1940-11-27</dob>
        </person>
        ```        
        There is no rule to pick one solution over the other but, generally speaking, elements are a better solution because it allows you to be more explicit.
        
        ```
        <email year="2013" month="01" day="01" to="Audience" from="Tevye" subject="If I were a rich man" body="I wouldn't have to know how to use a computer...">
        </email>
        ```
        
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <person>
         <firstname>Bruce</firstname>
         <lastname>Lee</lastname>
         <gender>male</gender>
         <dob>
           <year>1940</year>
           <month>11</month>
           <day>27</day>
         </dob>
       </person>
- title: "DTDs"
  desc: |
        You are already familiar with Document Type Definitions as you encountered them without knowing when working with (X)HTML.
        
        XML by itself cannot check that a document instance contains information that "makes sense" as all it knows is the basic syntax of XML (as seen in <a href="#1">slide 1</a>). With a DTD, you can define how an XML should look like. To define a doctype, add the following declaration:
        ```
        <!DOCTYPE root-element [element-declarations]>
        ```
        <h2>External DTD file</h2>
        ```
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE users SYSTEM "users.dtd">
        <users>
          <user id="1" gender="male">
            <name>Tux The Penguin</name>
            <birthday>1996-05-02</birthday>
          </user>
        </users>
        ```
        <h2>Embedded DTD</h2>
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE users [
        <!ELEMENT users (user)*>
        <!ELEMENT user (name, birthday?, address?)>
        <!ATTLIST user
           id     CDATA         #REQUIRED
           gender (male|female) #IMPLIED
        >
        <!ELEMENT name (#PCDATA)>
        <!ELEMENT birthday (#PCDATA)>
        <!ELEMENT address (city, country)>
        <!ELEMENT city (#PCDATA)>
        <!ELEMENT country (#PCDATA)>
      ]>
      <users>
        <user id="1" gender="male">
          <name>Tux The Penguin</name>
          <birthday>1996-05-02</birthday>
        </user>
      </users>
- title: "DTDs: Elements"
  desc: |
        <h2>Syntax</h2>
        ```
        <!ELEMENT element-name category>
        ```
        ```
        <!ELEMENT element-name (element-content)>
        ```
        <h2>Element name restrictions</h2>
        <ul>
          <li>Names can contain letters, numbers, and other characters</li>
          <li>Names cannot start with a number or punctuation character</li>
          <li>Names cannot start with the letters xml (or XML, or Xml, etc)</li>
          <li>Names cannot contain spaces</li>
        </ul>
- title: "DTD Element: empty tag"
  desc: |
        ```
        <!ELEMENT element-name EMPTY>
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE todo [
        <!ELEMENT todo EMPTY>
      ]>
      <todo />
- title: "DTD Element: `PCDATA`"
  desc: |
        Otherwise known as parsed character data, `PCDATA` is used with `!ELEMENT` declarations to define that the contents of the element is arbitrary text. Tags inside the text will be treated as markup and entities will be expanded. `<` and `&` are still invalid however.
        ```
        <!ELEMENT element-name (#PCDATA)>
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE todo [
        <!ELEMENT todo (#PCDATA)>
      ]>
      <todo>
        Do some chores...
      </todo>
- title: "DTD Element: any content"
  desc: |
        Allows any parsable data to be inserted including other elements and text.
        ```
        <!ELEMENT element-name ANY>
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE todo [
        <!ELEMENT todo ANY>
        <!ELEMENT item ANY>
      ]>
      <todo>
        Do some chores...
        <item>one</item>
      </todo>
- title: "DTD Element: sequences"
  desc: |
        Allows the use of the specified children elements in the same order as declared in parenthesis. 
        ```
        <!ELEMENT element-name (child1,child2,...)>
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE email [
        <!ELEMENT email (to,from,subject,body)>
        <!ELEMENT to (#PCDATA)>
        <!ELEMENT from (#PCDATA)>
        <!ELEMENT subject (#PCDATA)>
        <!ELEMENT body (#PCDATA)>
      ]>
      <email>
      <!-- Try changing the order of an element -->
        <to>everyone</to>
        <from>hello@istvan.co</from>
        <subject>Reminder</subject>
        <body>
          Study for the test!
        </body>
      </email>
- title: "DTD Element: occur once"
  desc: |
        ```
        <!ELEMENT element-name (child-name)>
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE catalogue [
        <!ELEMENT catalogue ANY>
        <!ELEMENT movie ANY>
        <!ELEMENT release (year)>
        <!ELEMENT year (#PCDATA)>
        <!ELEMENT title (#PCDATA)>
      ]>
      <catalogue>
        <movie>
          <title>The Wizard of Oz</title>
          <release>
            <year>1939</year>
          </release>
        </movie>
      </catalogue>
- title: "DTD Element: occur at least once"
  desc: |
        ```
        <!ELEMENT element-name (child-name+)>
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE catalogue [
        <!ELEMENT catalogue (movie+)>
        <!ELEMENT movie (title+,release)>
        <!ELEMENT release (year)>
        <!ELEMENT year (#PCDATA)>
        <!ELEMENT title (#PCDATA)>
      ]>
      <catalogue>
        <movie>
          <title>The Wizard of Oz</title>
          <release>
            <year>1939</year>
          </release>
        </movie>
      </catalogue>
- title: "DTD Element: occur zero or more times"
  desc: |
        ```
        <!ELEMENT element-name (child-name*)>
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE catalogue [
        <!ELEMENT catalogue (movie*)>
        <!ELEMENT movie (title+,release)>
        <!ELEMENT release (year)>
        <!ELEMENT year (#PCDATA)>
        <!ELEMENT title (#PCDATA)>
      ]>
      <catalogue/>
- title: "DTD Element: occur zero or one time"
  desc: |
        ```
        <!ELEMENT element-name (child-name?)>
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE catalogue [
        <!ELEMENT catalogue (movie*)>
        <!ELEMENT movie (title+,release?)>
        <!ELEMENT release (year)>
        <!ELEMENT year (#PCDATA)>
        <!ELEMENT title (#PCDATA)>
      ]>
      <catalogue>
        <movie>
          <title>Star Wars: Episode IX</title>
        </movie>
      </catalogue>
- title: "DTD Element: either/or"
  desc: |
        ```
        <!ELEMENT element-name (child-a|child-b)>
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE catalogue [
        <!ELEMENT catalogue (movie*)>
        <!ELEMENT movie (title+,(release|release-date)?)>
        <!ELEMENT release (year)>
        <!ELEMENT release-date (year)>
        <!ELEMENT year (#PCDATA)>
        <!ELEMENT title (#PCDATA)>
      ]>
      <catalogue>
        <movie>
          <title>The Wizard of Oz</title>
          <release-date>
            <year>1939</year>
          </release-date>
        </movie>
      </catalogue>
- title: "DTD Element: Mixed content"
  desc: |
        ```
        <!ELEMENT element-name (#PCDATA|child-1|child-2,child-n,...)*>
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE catalogue [
        <!ELEMENT catalogue (movie*)>
        <!ELEMENT movie (title+,release-date?)>
        <!ELEMENT release-date (#PCDATA|year)*>
        <!ELEMENT year (#PCDATA)>
        <!ELEMENT title (#PCDATA)>
      ]>
      <catalogue>
        <movie>
          <title>Star Wars: Episode IX</title>
          <release-date>
            <year>2021</year>
            (tentative)
          </release-date>
        </movie>
      </catalogue>
- title: "DTD Attributes"
  desc: |
        <h2>Syntax</h2>
        ```
        <!ATTLIST element-name attribute-name attribute-type default-value>
        ```
        <h2>Attribute name restrictions</h2>
        <ul>
          <li>Names must start with an upper or lower case letter, a colon (`:`) or an underscore (`_`).</li>
          <li>Following the start character, digits (0-9), dashes (`-`) and the dot (`.`) can be used.</li>
        </ul>
- title: "DTD Attribute: character data, default value"
  desc: |
        ```
        <!ATTLIST element-name attribute-name CDATA "default">
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE catalogue [
        <!ELEMENT catalogue (movie*)>
        <!ELEMENT movie (title+,release-date?)>
        <!ATTLIST movie
          id CDATA ""
        >
        <!ELEMENT release-date (#PCDATA|year)*>
        <!ELEMENT year (#PCDATA)>
        <!ELEMENT title (#PCDATA)>
      ]>
      <catalogue>
        <movie>
          <title>Star Wars: Episode VI</title>
          <release-date>
            <year>2015</year>
          </release-date>
        </movie>
      </catalogue>
- title: "DTD Attribute: required, optional or fixed"
  desc: |
        An attribute that needs to be set:
        ```
        <!ATTLIST element-name attribute-name CDATA #REQUIRED>
        ```
        An attribute that is optional:
        ```
        <!ATTLIST element-name attribute-name CDATA #IMPLIED>
        ```
        An attribute with a preset value that cannot be altered:
        ```
        <!ATTLIST element-name attribute-name CDATA #FIXED "value">
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE catalogue [
        <!ELEMENT catalogue (movie*)>
        <!ELEMENT movie (title+,release-date?)>
        <!ATTLIST movie
          imdb-id CDATA #REQUIRED
        >
        <!ELEMENT release-date (#PCDATA|year)*>
        <!ELEMENT year (#PCDATA)>
        <!ELEMENT title (#PCDATA)>
      ]>
      <catalogue>
        <movie imdb-id="tt2488496">
          <title>Star Wars: Episode VI</title>
          <release-date>
            <year>2015</year>
          </release-date>
        </movie>
      </catalogue>
- title: "DTD Attribute: enumerated list"
  desc: |
        You can define an attribute to only allow the use of one of the predefined values.
        ```
        <!ATTLIST element-name attribute-name (value1|value2|...) default-value>
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE catalogue [
        <!ELEMENT catalogue (person*)>
        <!ELEMENT person (firstname,lastname,dob)>
        <!ELEMENT firstname (#PCDATA)>
        <!ELEMENT lastname (#PCDATA)>
        <!ATTLIST person
          gender (male|female|unspecified) "unspecified"
        >
        <!ELEMENT dob (year,month,day)>
        <!ELEMENT year (#PCDATA)>
        <!ELEMENT month (#PCDATA)>
        <!ELEMENT day (#PCDATA)>
      ]>
       <catalogue>
       <!-- Try assigning gender to something that is not in the list -->
         <person gender="male">
           <firstname>Bruce</firstname>
           <lastname>Lee</lastname>
           <dob>
             <year>1940</year>
             <month>11</month>
             <day>27</day>
           </dob>
         </person>
       </catalogue>
- title: "DTD Attribute: `ID`"
  desc: |
        You can define an attribute to have a unique value. Note that this is similar to the id attribute in HTML: it cannot start with a number! Also note that only one attribute of this type can be used.
        ```
        <!ATTLIST element-name attribute-name ID default-value>
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE users [
        <!ELEMENT users (person*)>
        <!ELEMENT person (firstname,lastname,dob?)>
        <!ELEMENT firstname (#PCDATA)>
        <!ELEMENT lastname (#PCDATA)>
        <!ATTLIST person
          username ID #REQUIRED
          gender (male|female|unspecified) "unspecified"
        >
        <!ELEMENT dob (year,month,day)>
        <!ELEMENT year (#PCDATA)>
        <!ELEMENT month (#PCDATA)>
        <!ELEMENT day (#PCDATA)>
      ]>
       <users>
       <!-- Try assigning id to something that is already in use -->
         <person username="linux">
           <firstname>Linus</firstname>
           <lastname>Torvalds</lastname>
         </person>
         <person username="c">
           <firstname>Dennis</firstname>
           <lastname>Ritchie</lastname>
         </person>
       </users>
- title: "DTD Attribute: `IDREF`"
  desc: |
        You can define an attribute to have the id of another element.
        ```
        <!ATTLIST element-name attribute-name IDREF default-value>
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE comments [
        <!ELEMENT comments (comment*)>
        <!ELEMENT comment (#PCDATA)>
        <!ATTLIST comment
          id ID #REQUIRED
          username CDATA #REQUIRED
          parent IDREF #IMPLIED
        >
      ]>
       <comments>
         <comment id="c1" username="anon">
           First!
         </comment>
         <comment id="c2" username="admin" parent="c1">
           I banish you!
         </comment>
       </comments>
- title: "DTDs: Entities"
  desc: |
        Entities are variables used to define shortcuts to standard text or special characters.
        ```
        <!ENTITY entity-name "entity-value">
        ```
  xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE article [
        <!ENTITY writer "Anonymous">
        <!ENTITY copy "©">
        <!ENTITY copyright "Copyright &copy; 2013">
        <!ELEMENT article (title,author,publish-date?,body)>
        <!ELEMENT title (#PCDATA)>
        <!ELEMENT author (#PCDATA)>
        <!ELEMENT publish-date (#PCDATA)>
        <!ELEMENT body (#PCDATA)>
      ]>
       <article>
         <title>How to make money with SEO</title>
         <author>&writer;</author>
         <body>
         - In progress -
         &copyright;
         </body>
       </article>
- title: "DTDs: `PCDATA` & `CDATA`"
  desc: |
        `PCDATA` and `CDATA` are used to define what is allowed to be used as content inside a element or an attribute, respectively.
        <h2>`PCDATA`</h2>
        Otherwise known as parsed character data, `PCDATA` is used with `!ELEMENT` declarations to define that the contents of the element is arbitrary text. Tags inside the text will be treated as markup and entities will be expanded. `<` and `&` are still invalid however.
        <h2>`CDATA`</h2>
        Otherwise known as character data, `CDATA` is used with `!ATTLIST` declarations to define that the value of the attribute is arbitrary text. Tags inside the text will NOT be treated as markup and entities will NOT be expanded. `<` and `&` are still invalid however.
        <h2>`CDATA` section</h2>
        ```
        <![CDATA[ arbitrary content here ]]>
        ```
        A `CDATA` section allows to insert any arbitrary text including the special characters `<` and `&`... except of course the `]]>` sequence of characters which mark the end of the `CDATA` section.
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <!DOCTYPE todo [
         <!ELEMENT todo (item)*>
         <!ELEMENT item (#PCDATA)>
         <!ATTLIST item
             title CDATA #IMPLIED
         >
       ]>
       <todo>
         <item title="html">
           <![CDATA[
             <strong>bolded text</strong>
           ]]>
         </item>
       </todo>
      
- title: "XML and stylesheets"
  desc: |
        XML elements can be styled using stylesheets. Simply add the following declaration after the DOCTYPE:
        ```
        <?xml-stylesheet type="text/css" href="filename.css"?>
        ```
        <h2>Example</h2>
        <ul>
          <li><a href="books.xml" target="_blank">books.xml</a></li>
          <li><a href="books.dtd" target="_blank">books.dtd</a></li>
          <li><a href="books.css" target="_blank">books.css</a></li>
        </ul>
- title: "Parsing an XML document using SimpleXML"
  desc: |
        <h2>Load from a string</h2>
        Use the `simplexml_load_string()` function. The string could come from a file that has been read into a string, such as with `file_get_contents()` or directly inline:
        ```
        <?php
        $string = <<<XML
        <?xml version='1.0'?> 
        <document>
         <title>Forty What?</title>
         <from>Joe</from>
         <to>Jane</to>
         <body>
          I know that's the answer -- but what's the question?
         </body>
        </document>
        XML;

        $xml = simplexml_load_string($string);

        print_r($xml);
        ```
        <h2>Load from a file</h2>
        Use the `simplexml_load_file()` function as demonstrated below with the xml file from the previous slide.
        <p>
          <a href="http://ca3.php.net/manual/en/simplexml.examples-basic.php"
             target="_blank">SimpleXML at php.net</a>
        </p>
  php: |
       <?php

       $library = simplexml_load_file("books.xml");

       foreach($library as $book)
       {
           printf("%s (%s)<br>", $book->title,
                                 $book['category']);
       }
- title: "Creating an XML file using XMLWriter"
  desc: |
        See below for a simple example.
        <p>
          <a href="http://ca3.php.net/manual/en/book.xmlwriter.php" target="_blank">
            XMLWriter at php.net
          </a>
        </p>
  pre: true
  php: |
        <?php

        # Instantiate new class
        $writer = new XMLWriter();

        # Write the contents to memory
        $writer->openMemory();

        # Use indents
        $writer->setIndent(true);
        # Set it to two spaces
        $writer->setIndentString("  ");

        # XML declaration line
        $writer->startDocument('1.0', 'UTF-8');
        
        # Start the root element
        $writer->startElement('library');

         $writer->startElement('book');
           $writer->startAttribute('category');
             $writer->text('thriller');
           $writer->endAttribute();
           $writer->startElement("title");
             $writer->text("Daemon");
           $writer->endElement();
           $writer->startElement("isbn");
             $writer->text("978-0451228734");
           $writer->endElement();
           $writer->startElement("authors");
             $writer->startElement("author");
               $writer->startElement("firstname");
                 $writer->text("Daniel");
               $writer->endElement();
               $writer->startElement("lastname");
                 $writer->text("Suarez");
               $writer->endElement();
             $writer->endElement();
           $writer->endElement();
           $writer->startElement("publisher");
             $writer->text("Signet");
           $writer->endElement();
         $writer->endElement();
        $writer->endElement();

        # Close the document
        $writer->endDocument();

        # Echo out the final output
        echo htmlspecialchars($writer->outputMemory());
- title: "XML Schema"
  desc: |
        Schemas are like DTDs: they provide structure to XML documents.
        They are much more powerful but more complex to write.
        <h2>Why use Schemas over DTDs</h2>
        <ul>
          <li>Restrict the values of elements and attributes to specific data types</li>
          <li>Use regular experssions to check values</li>
          <li>Schemas can be parsed and created using any XML parser</li>
          <li>Easily reference multiple schemas in the same document</li>
        </ul>
  xsd: |
        <?xml version="1.0" encoding="UTF-8"?>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    targetNamespace="http://encs.concordia.ca"
                    xmlns="http://encs.concordia.ca"
                    elementFormDefault="qualified">
        <xsd:element name="email">
          <xsd:complexType>
            <xsd:sequence>
              <xsd:element name="to" type="xsd:string"/>
              <xsd:element name="from" type="xsd:string"/>
              <xsd:element name="subject" type="xsd:string"/>
              <xsd:element name="body" type="xsd:string"/>
            </xsd:sequence>
          </xsd:complexType>
        </xsd:element>
        </xsd:schema>
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <email xmlns="http://encs.concordia.ca"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://encs.concordia.ca email.xsd">
         <to>everyone</to>
         <from>hello@istvan.co</from>
         <subject>Reminder</subject>
         <body>
           Study for the test!
         </body>
       </email>
- title: "The `<schema>` element"
  desc: |
        An XML Schema document is really just XML document and hence
        it obeys all of the rules of XML documents such as defining a root element.
        That would be `<schema>` for schema documents. A few attributes are
        usually attached to this root element:
        <dl>
          <dt>`xmlns:xsd="http://www.w3.org/2001/XMLSchema"`</dt>
          <dd>
            Specifies that the namespace of all `xsd` prefixed elements is
            `http://www.w3.org/2001/XMLSchema`.<br>
            Note that the value of this attribute should not be changed or your document won't validate properly.
            You can however use a different prefix than `xsd` if you wish, just keep in mind that
            you must be consistent and make the changes accordingly in your xml instances. For example:
            ```
        <?xml version="1.0" encoding="UTF-8"?>
        <x:schema xmlns:x="http://www.w3.org/2001/XMLSchema"
                   targetNamespace="http://encs.concordia.ca"
                   xmlns="http://encs.concordia.ca"
                   elementFormDefault="qualified">
        <x:element name="email">
          <x:complexType>
            <x:sequence>
              <x:element name="to" type="x:string"/>
              <x:element name="from" type="x:string"/>
              <x:element name="subject" type="x:string"/>
              <x:element name="body" type="x:string"/>
            </x:sequence>
          </x:complexType>
        </x:element>
        </x:schema>```
          </dd>
          <dt>`targetNamespace="http://encs.concordia.ca"`</dt>
          <dd>
            Specifies that the namesapce of the defined elements in this schema is
            `http://encs.concordia.ca`.
          </dd>
          <dt>`xmlns="http://encs.concordia.ca"`</dt>
          <dd>
            Specifies that the default namespace is `http://encs.concordia.ca`.
          </dd>
          <dt>`elementFormDefault="qualified"`</dt>
          <dd>
            Specifies that any elements used by an XML instance and defined in this schema,
            must be namespace qualified.
          </dd>
        </dl>
        <h2>KISS: keep it simple, stupid&trade;</h2>
        While you can omit the namespaces completely (as shown below), never do it with real projects as you might get unintended collisions as your project grows.
        <p>
          <a href="http://www.xfront.com/DefaultNamespace.pdf"
             target="_blank">Choosing a default namespaces</a><br>
          <a href="http://www.rpbourret.com/xml/NamespacesFAQ.htm"
             target="_blank">XML namespace FAQ</a>
        </p>
  xsd: |
       <?xml version="1.0" encoding="UTF-8"?>
       <schema xmlns="http://www.w3.org/2001/XMLSchema">
       <element name="email">
         <complexType>
           <sequence>
             <element name="to" type="string"/>
             <element name="from" type="string"/>
             <element name="subject" type="string"/>
             <element name="body" type="string"/>
           </sequence>
         </complexType>
       </element>
       </schema>
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <email>
         <to>everyone</to>
         <from>hello@istvan.co</from>
         <subject>Reminder</subject>
         <body>
           Study for the test!
         </body>
       </email>
- title: "XSD Simple Elements"
  desc: |
        Simple elements are elements that can only contain text such strings,
        integers, etc, as defined by the `type` attribute.
        They cannot contain other elements or attributes.
        <h2>Element syntax</h2>
        ```<xsd:element name="element-name" type="data-type"/>```
        <h2>Data types</h2>
        <table>
          <tr>
            <th>Date type</th>
            <th>Description</th>
            <th>Example</th>
          </tr>
          <tr>
            <td>string</td>
            <td>Arbitrary text</td>
            <td>foo bar</td>
          </tr>
          <tr>
            <td>integer</td>
            <td>An integer</td>
            <td>8</td>
          </tr>
          <tr>
            <td>decimal</td>
            <td>A number that can be represented as a power of 10</td>
            <td>-1.23</td>
          </tr>
          <tr>
            <td>float</td>
            <td>A single-precision floating point number</td>
            <td>-1E4</td>
          </tr>
          <tr>
            <td>double</td>
            <td>A double-precision floating point number</td>
            <td>12.78e-2</td>
          </tr>
          <tr>
            <td>duration</td>
            <td>Distance of time in the `PnYn MnDTnH nMnS` format</td>
            <td>P1Y2M3DT10H30M</td>
          </tr>
          <tr>
            <td>dateTime</td>
            <td>A representation of date and time</td>
            <td>2002-10-10T12:00:00-05:00</td>
          </tr>
          <tr>
            <td>time</td>
            <td>A representation of recuring time</td>
            <td>13:20:00-05:00</td>
          </tr>
          <tr>
            <td>date</td>
            <td>A representation of a specific date</td>
            <td>2002-10-10-05:00</td>
          </tr>
          <tr>
            <td colspan="3">
              <a href="http://www.w3.org/TR/xmlschema-2/#datatype" target="_blank">
              See complete list at W3C &raquo;</a></td>
          </tr>
        </table>
        <h2>Default value</h2>
        To set a default value to an element use the `default` attribute.
        ```<xsd:element name="element-name" type="data-type" default="default-value"/>```
        <h2>Fixed value</h2>
        To set the element to a value that can never be changed, use the `fixed` attribute.
        ```<xsd:element name="element-name" type="data-type" fixed="fixed-value"/>```
  xsd: |
        <?xml version="1.0" encoding="UTF-8"?>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    targetNamespace="http://encs.concordia.ca"
                    xmlns="http://encs.concordia.ca"
                    elementFormDefault="qualified">
        <xsd:element name="todo">
          <xsd:complexType>
            <xsd:sequence>
              <xsd:element name="title" type="xsd:string"/>
              <xsd:element name="date" type="xsd:dateTime"/>
              <xsd:element name="priority" type="xsd:integer"/>
            </xsd:sequence>
          </xsd:complexType>
        </xsd:element>
        </xsd:schema>
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <todo xmlns="http://encs.concordia.ca"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://encs.concordia.ca todo.xsd">
         <title>Buy milk</title>
         <date>2013-04-01T09:00:00-05:00</date>
         <priority>1</priority>
       </todo>
- title: "XSD Attributes"
  desc: |
        <h2>Attribute syntax</h2>
        ```<xsd:attribute name="attribute-name" type="data-type"/>```
        <h2>Default value</h2>
        To set a default value to an attribute use the `default` attribute.
        ```<xsd:attribute name="attribute-name" type="data-type" default="default-value"/>```
        <h2>Fixed value</h2>
        To set the attribute to a value that can never be changed, use the `fixed` attribute.
        ```<xsd:attribute name="attribute-name" type="data-type" fixed="fixed-value"/>```
        <h2>Required attributes</h2>
        Attributes are optional by default. To require an attribute use the `use` attribute.
        ```<xsd:attribute name="attribute-name" type="data-type" use="required"/>```
  xsd: |
        <?xml version="1.0" encoding="UTF-8"?>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    targetNamespace="http://encs.concordia.ca"
                    xmlns="http://encs.concordia.ca"
                    elementFormDefault="qualified">
        <xsd:element name="todo">
          <xsd:complexType>
            <xsd:sequence>
              <xsd:element name="item">
                <xsd:complexType>
                  <xsd:simpleContent>
                    <xsd:extension base="xsd:string">
                      <xsd:attribute name="date" type="xsd:dateTime"/>
                      <xsd:attribute name="priority" type="xsd:integer"/>
                    </xsd:extension>
                  </xsd:simpleContent>
                </xsd:complexType>
              </xsd:element>
            </xsd:sequence>
          </xsd:complexType>
        </xsd:element>
        </xsd:schema>
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <todo xmlns="http://encs.concordia.ca"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://encs.concordia.ca todo.xsd">
         <item priority="1"
               date="2013-04-01T09:00:00-05:00">
           Buy milk
         </item>
       </todo>
- title: "Occurance"
  desc: |
        Using `minOccurs` and `maxOccurs`, you can set how many times an element can be repeated.
        The defaults are 1 and 1 respectively (occur exactly once).

        To allow unlimited number of occurrences, use `unbounded` as the value.
  xsd: |
        <?xml version="1.0" encoding="UTF-8"?>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    targetNamespace="http://encs.concordia.ca"
                    xmlns="http://encs.concordia.ca"
                    elementFormDefault="qualified">
          <xsd:element name="todo">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="item"
                             minOccurs="0" maxOccurs="unbounded"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:schema>

  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <todo xmlns="http://encs.concordia.ca"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://encs.concordia.ca todo.xsd">
         <item></item>
       </todo>
- title: "Oder: `sequence`"
  desc: |
        Sequences allow you to assign a specific order to how elements appear.
        The `sequence` tag must be wrapped inside a `complexType` tag.
  xsd: |
        <?xml version="1.0" encoding="UTF-8"?>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    targetNamespace="http://encs.concordia.ca"
                    xmlns="http://encs.concordia.ca"
                    elementFormDefault="qualified">
          <xsd:element name="email">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="from"/>
                <xsd:element name="to"/>
                <xsd:element name="subject"/>
                <xsd:element name="body"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:schema>

  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <email xmlns="http://encs.concordia.ca"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://encs.concordia.ca todo.xsd">
         <to/>
         <from/>
         <subject/>
         <body/>
       </email>
- title: "Order: `choice`"
  desc: |
        Choices allow to select one (or more, if `minOccurs` and/or `maxOccurs` are changed) element from a list of candidates.
        The `choice` tag must be wrapped inside a `complexType` tag.
  xsd: |
        <?xml version="1.0" encoding="UTF-8"?>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    targetNamespace="http://encs.concordia.ca"
                    xmlns="http://encs.concordia.ca"
                    elementFormDefault="qualified">
          <xsd:element name="email">
            <xsd:complexType>
              <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element name="from"/>
                <xsd:element name="to"/>
                <xsd:element name="subject"/>
                <xsd:element name="body"/>
              </xsd:choice>
            </xsd:complexType>
          </xsd:element>
        </xsd:schema>
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <email xmlns="http://encs.concordia.ca"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://encs.concordia.ca todo.xsd">
         <to/>
         <from/>
         <subject/>
         <body/>
         <body/><!-- can be repeated! -->
       </email>
- title: "Order: `all`"
  desc: |
        Unlike the previous example, `all` allows us to use an element from a
        list only once but in any order.
  xsd: |
        <?xml version="1.0" encoding="UTF-8"?>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    targetNamespace="http://encs.concordia.ca"
                    xmlns="http://encs.concordia.ca"
                    elementFormDefault="qualified">
          <xsd:element name="email">
            <xsd:complexType>
              <xsd:all>
                <xsd:element name="from"/>
                <xsd:element name="to"/>
                <xsd:element name="subject"/>
                <xsd:element name="body"/>
              </xsd:all>
            </xsd:complexType>
          </xsd:element>
        </xsd:schema>
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <email xmlns="http://encs.concordia.ca"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://encs.concordia.ca todo.xsd">
         <to/>
         <from/>
         <subject/>
         <body/>
       </email>
- title: "Empty elements"
  desc: |
        ```<xsd:element name="item"/>```
        <h2>Empty elements with attributes</h2>
  xsd: |
        <?xml version="1.0" encoding="UTF-8"?>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    targetNamespace="http://encs.concordia.ca"
                    xmlns="http://encs.concordia.ca"
                    elementFormDefault="qualified">
          <xsd:element name="todo">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="item">
                  <xsd:complexType>
                    <xsd:attribute name="title" type="xsd:string"/>
                  </xsd:complexType>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:schema>

  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <todo xmlns="http://encs.concordia.ca"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://encs.concordia.ca todo.xsd">
         <item title="Buy milk"/>
       </todo>
- title: "Facets"
  desc: |
        Facets are restrictions applied to values (attributes or an element&apos;s content).
        <h2>Numeric range</h2>
        Use `minInclusive` or `minExclusive` and `maxInclusive` or `maxExclusive` to set the lower
        and upper bound respectively for a number (`integer`, `float`, etc.) based type.
        ```
        <xsd:simpleType>
          <xsd:restriction base="xsd:integer">
              <xsd:maxInclusive value="1"/>
              <xsd:maxInclusive value="5"/>
          </xsd:restriction>
        </xsd:simpleType>
        ```
  xsd: |
        <?xml version="1.0" encoding="UTF-8"?>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    targetNamespace="http://encs.concordia.ca"
                    xmlns="http://encs.concordia.ca"
                    elementFormDefault="qualified">
          <!-- simple types -->
          <xsd:simpleType name="priority">
            <xsd:restriction base="xsd:integer">
                <xsd:minInclusive value="1"/>
                <xsd:maxInclusive value="5"/>
            </xsd:restriction>
          </xsd:simpleType>

          <!-- complex types -->
          <xsd:complexType name="item">
            <xsd:simpleContent>
              <xsd:extension base="xsd:string">
                <xsd:attribute name="priority" type="priority"/>
              </xsd:extension>
            </xsd:simpleContent>
          </xsd:complexType>

          <!-- structure -->
          <xsd:element name="todo">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="item" type="item"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>

        </xsd:schema>
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <todo xmlns="http://encs.concordia.ca"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://encs.concordia.ca todo.xsd">
         <item priority="1">
           Buy milk
         </item>
       </todo>
- title: "Facets: `decimal` precision"
  desc: |
        You can restrict how many digits to the left and to the right of the decimal points for `decimal` data types.
        ```
        <xsd:simpleType>
          <xsd:restriction base="xsd:decimal">
              <xsd:totalDigits value="12"/>
              <xsd:fractionDigits value="2"/>
          </xsd:restriction>
        </xsd:simpleType>
        ```
  xsd: |
        <?xml version="1.0" encoding="UTF-8"?>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    targetNamespace="http://encs.concordia.ca"
                    xmlns="http://encs.concordia.ca"
                    elementFormDefault="qualified">
          <!-- simple types -->
          <xsd:simpleType name="balance">
          <xsd:restriction base="xsd:decimal">
              <xsd:totalDigits value="12"/>
              <xsd:fractionDigits value="2"/>
            </xsd:restriction>
          </xsd:simpleType>

          <!-- complex types -->
          <xsd:complexType name="user">
            <xsd:sequence>
              <xsd:element name="firstname" type="xsd:string"/>
              <xsd:element name="lastname" type="xsd:string"/>
              <xsd:element name="balance" type="balance"/>
            </xsd:sequence>
            <xsd:attribute name="id" type="xsd:integer"/>
          </xsd:complexType>

          <!-- structure -->
          <xsd:element name="directory">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="user" type="user"
                             minOccurs="0" maxOccurs="unbounded"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>

        </xsd:schema>
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <directory xmlns="http://encs.concordia.ca"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://encs.concordia.ca todo.xsd">
         <user id="1">
           <firstname>John</firstname>
           <lastname>Appleseed</lastname>
           <balance>13.25</balance>
         </user>
       </directory>
- title: "Facets: sets (enumerated values)"
  desc: |
        You can create an enumerated set of values for attributes or elements to use.
        ```
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
              <xsd:enumeration value="male"/>
              <xsd:enumeration value="female"/>
              <xsd:enumeration value="unspecified"/>
          </xsd:restriction>
        </xsd:simpleType>
        ```
  xsd: |
        <?xml version="1.0" encoding="UTF-8"?>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    targetNamespace="http://encs.concordia.ca"
                    xmlns="http://encs.concordia.ca"
                    elementFormDefault="qualified">
          <!-- simple types -->
          <xsd:simpleType name="gender">
            <xsd:restriction base="xsd:string">
              <xsd:enumeration value="male"/>
              <xsd:enumeration value="female"/>
              <xsd:enumeration value="unspecified"/>
            </xsd:restriction>
          </xsd:simpleType>

          <!-- complex types -->
          <xsd:complexType name="user">
            <xsd:sequence>
              <xsd:element name="firstname" type="xsd:string"/>
              <xsd:element name="lastname" type="xsd:string"/>
              <xsd:element name="gender" type="gender"/>
            </xsd:sequence>
            <xsd:attribute name="id" type="xsd:integer"/>
          </xsd:complexType>

          <!-- structure -->
          <xsd:element name="directory">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="user" type="user"
                             minOccurs="0" maxOccurs="unbounded"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>

        </xsd:schema>
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <directory xmlns="http://encs.concordia.ca"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://encs.concordia.ca todo.xsd">
         <user id="1">
           <firstname>Aria</firstname>
           <lastname>Stark</lastname>
           <gender>female</gender>
         </user>
       </directory>
- title: "Facets: whitespace"
  desc: |
        You can choose remove all white space characters (line feeds, tabs,
        spaces, carriage returns) by setting the `whiteSpace` to `replace`.
        If you want to additionally replace multiple spaces, use `collapse`
        as the value instead. To preserve all whitespace (the default),
        use `preserve`.
        ```
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
              <xsd:whiteSpace value="collapse"/>
          </xsd:restriction>
        </xsd:simpleType>
        ```
  xsd: |
        <?xml version="1.0" encoding="UTF-8"?>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    targetNamespace="http://encs.concordia.ca"
                    xmlns="http://encs.concordia.ca"
                    elementFormDefault="qualified">
          <!-- simple types -->
          <xsd:simpleType name="address">
            <xsd:restriction base="xsd:string">
              <xsd:whiteSpace value="collapse"/>
            </xsd:restriction>
          </xsd:simpleType>

          <!-- complex types -->
          <xsd:complexType name="user">
            <xsd:sequence>
              <xsd:element name="firstname" type="xsd:string"/>
              <xsd:element name="lastname" type="xsd:string"/>
              <xsd:element name="address" type="address"/>
            </xsd:sequence>
            <xsd:attribute name="id" type="xsd:integer"/>
          </xsd:complexType>

          <!-- structure -->
          <xsd:element name="directory">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="user" type="user"
                             minOccurs="0" maxOccurs="unbounded"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>

        </xsd:schema>
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <directory xmlns="http://encs.concordia.ca"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://encs.concordia.ca todo.xsd">
         <user id="1">
           <firstname>John</firstname>
           <lastname>Appleseed</lastname>
           <address>
             1 Infinite Loop
             Cupertino, CA
             USA
           </address>
         </user>
       </directory>
- title: "Facets: string length"
  desc: |
        You can set the `minLength` and `maxLength` of a string or the exact length using `length`.
        ```
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
              <xsd:minLength value="8"/>
              <xsd:maxLength value="255"/>
          </xsd:restriction>
        </xsd:simpleType>
        ```
  xsd: |
        <?xml version="1.0" encoding="UTF-8"?>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    targetNamespace="http://encs.concordia.ca"
                    xmlns="http://encs.concordia.ca"
                    elementFormDefault="qualified">
          <!-- simple types -->
          <xsd:simpleType name="password">
            <xsd:restriction base="xsd:string">
                <xsd:minLength value="8"/>
                <xsd:maxLength value="20"/>
            </xsd:restriction>
          </xsd:simpleType>

          <!-- complex types -->
          <xsd:complexType name="user">
            <xsd:sequence>
              <xsd:element name="username" type="xsd:string"/>
              <xsd:element name="password" type="password"/>
            </xsd:sequence>
            <xsd:attribute name="id" type="xsd:integer"/>
          </xsd:complexType>

          <!-- structure -->
          <xsd:element name="directory">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="user" type="user"
                             minOccurs="0" maxOccurs="unbounded"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>

        </xsd:schema>
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <directory xmlns="http://encs.concordia.ca"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://encs.concordia.ca todo.xsd">
         <user id="1">
           <username>root</username>
           <password>qHmA9tlvbUSe9jq6Vg5l</password>
         </user>
       </directory>
- title: "Facets: patterns"
  desc: |
        You can limit a value to a regular expression pattern.
        ```
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
              <xsd:pattern value="[a-z][a-z0-9]{0,31}"/>
          </xsd:restriction>
        </xsd:simpleType>
        ```
  xsd: |
        <?xml version="1.0" encoding="UTF-8"?>
        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                    targetNamespace="http://encs.concordia.ca"
                    xmlns="http://encs.concordia.ca"
                    elementFormDefault="qualified">
          <!-- simple types -->
          <xsd:simpleType name="username">
            <xsd:restriction base="xsd:string">
              <xsd:pattern value="[a-z][a-z0-9]{0,31}"/>
            </xsd:restriction>
          </xsd:simpleType>
          <xsd:simpleType name="password">
            <xsd:restriction base="xsd:string">
                <xsd:minLength value="8"/>
                <xsd:maxLength value="20"/>
            </xsd:restriction>
          </xsd:simpleType>

          <!-- complex types -->
          <xsd:complexType name="user">
            <xsd:sequence>
              <xsd:element name="username" type="username"/>
              <xsd:element name="password" type="password"/>
            </xsd:sequence>
            <xsd:attribute name="id" type="xsd:integer"/>
          </xsd:complexType>

          <!-- structure -->
          <xsd:element name="directory">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="user" type="user"
                             minOccurs="0" maxOccurs="unbounded"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>

        </xsd:schema>
  xml: |
       <?xml version="1.0" encoding="UTF-8"?>
       <directory xmlns="http://encs.concordia.ca"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://encs.concordia.ca todo.xsd">
         <user id="1">
           <username>root</username>
           <password>qHmA9tlvbUSe9jq6Vg5l</password>
         </user>
       </directory>
- title: "AJAX"
  desc: |
        AJAX stands for Asynchronous JavaScript and XML. In a nutshell, AJAX allows you to retrieve information
        from another page after the current page has already loaded.
        <p>
          <a href="http://users.encs.concordia.ca/~i_puszta/ajax.html" target="_blank">Full Demo &raquo;</a>
        </p>
        <h2>Client (JavaScript)</h2>
        ```
        var xhr, query = "my query";
        if (window.XMLHttpRequest) { // Modern browsers
            xhr = new XMLHttpRequest();
        } else if (window.ActiveXObject) { // IE 8 and older
            xhr = new ActiveXObject("Microsoft.XMLHTTP");
        }
        xhr.open('GET', 'ajax.php?q=' + encodeURIComponent(query));
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    var xml = xhr.responseXML;
                    // for text use xhr.responseText
                    // for JSON use JSON.parse(httpRequest.responseText)
                }
                else {
                  alert('Problem contacting server');
                }
            }
        };
        xhr.send();
        ```
        <h2>Server</h2>
        <a href="http://users.encs.concordia.ca/~i_puszta/ajax.php" target="_blank">ajax.php &raquo;</a>
        ```
        <?php
        # Set the output type to XML
        header("Content-type: text/xml; charset=utf-8");

        $query = (isset($_GET['q'])) ? $_GET['q'] : '';
        $xml = simplexml_load_file('library.xml');

        $writer = new XMLWriter();
        $writer->openMemory();
        $writer->setIndent(true);
        $writer->setIndentString("  ");
        $writer->startDocument('1.0', 'UTF-8');
        $writer->startElement('library');

        # Iterate through document and only keep matches
        foreach($xml as $book)
        {   
            if (stripos($book->title, $query) === FALSE)
            {
                continue;
            }
            $writer->startElement('book');
                $writer->startElement('title');
                    $writer->text($book->title);
                $writer->endElement();
                $writer->startElement('author');
                    $writer->text($book->author);
                $writer->endElement();
            $writer->endElement();
        }

        $writer->endDocument();
        echo $writer->outputMemory();
        ```
        <h2>Data source (library.xml)</h2>
        <a href="library.xml" target="_blank">library.xml &raquo;</a>

        <h2>Further reading</h2>
        <p>
          <a href="https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started"
             target="_blank">AJAX at MDN &raquo;</a><br>
          <a href="http://net.tutsplus.com/tutorials/javascript-ajax/5-ways-to-make-ajax-calls-with-jquery/"
             target="_blank">
          jQuery tutorial &raquo;</a>
        </p>